<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.ming.mapper.OrdersMapper">

    <select id="queryOrdersToUser" resultType="com.ming.po.OrdersEx">
        select
            orders.*,
            user.username,
            user.address,
            user.sex
        from
            orders,
            user
        where
            orders.user_id = user.id;
    </select>


    <!--测试使用resultMap来实现1:1的操作-->
    <resultMap id="queryOrdersToUserResultMap" type="com.ming.po.Orders">
        <!--orders表的信息-->
        <id column="id" property="id"/>
        <result column="user_id" property="userid"/>
        <result column="number" property="number"/>
        <result column="createtime" property="createtime"/>
        <result column="note" property="note"/>
        <!--关联表user的信息 1:1-->
        <!--
            使用association来表是一对一的关系
            property: 指的是Type当中的属性值
            javaType:指的是property当中指定的属性的类型
            column: 代表关联字段
            property: javaType中指定的类型的属性值(和关联字段对应)
        -->
        <association property="user" javaType="com.ming.po.User">
            <id column="user_id" property="id"/>
            <result column="username" property="username"/>
            <result column="sex" property="sex"/>
            <result column="address" property="address"/>
        </association>
    </resultMap>
    <select id="queryOrdersToUserRM" resultMap="queryOrdersToUserResultMap">
        select
            orders.*,
            user.username,
            user.address,
            user.sex
        from
            orders,
            user
        where
            orders.user_id = user.id;
    </select>


    <resultMap id="queryOrdersToOrderDetailResultMap" type="com.ming.po.Orders">
        <!--定义订单信息-->
        <id column="id" property="id"/>
        <result column="user_id" property="userid"/>
        <result column="number" property="number"/>
        <result column="createtime" property="createtime"/>
        <result column="note" property="note"/>
        <!--定义user的相关信息 -->
        <association property="user" javaType="com.ming.po.User">
            <id column="user_id" property="id"/>
            <result column="username" property="username"/>
            <result column="sex" property="sex"/>
            <result column="address" property="address"/>
        </association>
        <!--定义orderDetail相关的信息-->
        <collection property="orderdetailList" ofType="com.ming.po.Orderdetail">
            <id column="OrderDetailID" property="id"/>
            <result column="orders_id" property="ordersId"/>
            <result column="items_id" property="itemsId"/>
            <result column="items_num" property="itemsNum"/>
        </collection>

    </resultMap>
    <select id="queryOrdersToOrderDetail" resultMap="queryOrdersToOrderDetailResultMap">
        select
            orders.*,
            user.username,
            user.address,
            user.sex,
            orderdetail.id as OrderDetailID,
            orderdetail.orders_id,
            orderdetail.items_id,
            orderdetail.items_num
        from
            orders,
            user,
            orderdetail
        where
            orders.user_id = user.id
            and
            orders.id = orderdetail.orders_id;
    </select>

    <!--
        id：resultMap：id标识，与下面引用对应
        type：主表对应的类的全路径
    -->
    <resultMap id="queryOrderToItemsResultMap" type="com.ming.po.Orders">
        <!--orders-->
        <!--user   association-->
        <!--orderdetail   collection-->
        <!--
            id：数据库中主键id，名称需与数据库中的字段相同
            property：映射的主题类中与之对应的id，字段需与属性定义的名称相同
        -->
        <id column="id" property="id"/>
        <!--
            select语句中的其他字段需要全部包含，
            用以下形式与之对应
        -->
        <result column="user_id" property="userid"/>
        <result column="number" property="number"/>
        <result column="createtime" property="createtime"/>
        <result column="note" property="note"/>
        <!--
            association：一对一关系，
                        需在Oders表中添加字段    private User user;     表示一对一关系
            property：数据库中与主表一对一的关系表，参数为主表对应的实体类中的别的表的属性名称
            javaType：与之对应的实体类的全路径
        -->
        <association property="user" javaType="com.ming.po.User">
            <id column="user_id" property="id"/>
            <result column="username" property="username"/>
            <result column="sex" property="sex"/>
            <result column="address" property="address"/>
        </association>
        <!--
            collection：主表与该表为一对多的关系
                        需在Orders表中添加字段   private List<Orderdetail> orderdetailList;     表示一对多关系
            property：主表类中别的表的属性名称
            ofType：该表的全路径
        -->
        <collection property="orderdetailList" ofType="com.ming.po.Orderdetail">
            <id column="OrderDetailID" property="id"/>
            <result column="orders_id" property="ordersId"/>
            <result column="items_id" property="itemsId"/>
            <result column="items_num" property="itemsNum"/>
            <!--items  collection-->
            <!--
                主表与表items没有直接关系，是通过表Orderdetail表的与之有间接关系
                所以先在Orderdetail表中新增    private Items items;属性表示一对一关系
                然后应在该标签内部新增association标签与之对应
            -->
            <association property="items" javaType="com.ming.po.Items">
                <id column="ItemsID" property="id"/>
                <result column="name" property="name"/>
                <result column="detail" property="detail"/>
                <result column="price" property="price"/>
            </association>
        </collection>


    </resultMap>
    <select id="queryOrderToItems" resultMap="queryOrderToItemsResultMap">
        select
            orders.*,
            user.username,
            user.address,
            user.sex,
            orderdetail.id as OrderDetailID,
            orderdetail.orders_id,
            orderdetail.items_id,
            orderdetail.items_num,
            items.id as ItemsID,
            items.name,
            items.detail,
            items.price
        from
            orders,
            user,
            orderdetail,
            items
        where
            orders.user_id = user.id
            and
            orders.id = orderdetail.orders_id
            and
            orderdetail.items_id = items.id;
    </select>
</mapper>
